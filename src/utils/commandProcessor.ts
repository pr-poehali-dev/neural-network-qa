export interface CommandResult {
  isCommand: boolean;
  response?: string;
  type?: 'time' | 'date' | 'calc' | 'note' | 'list' | 'clear';
}

const notes: string[] = [];

export function processCommand(text: string): CommandResult {
  const lowerText = text.toLowerCase().trim();

  if (lowerText.includes('—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏') || lowerText.includes('–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å')) {
    const now = new Date();
    const time = now.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    return {
      isCommand: true,
      response: `‚è∞ –°–µ–π—á–∞—Å ${time}`,
      type: 'time'
    };
  }

  if (lowerText.includes('–∫–∞–∫–∞—è –¥–∞—Ç–∞') || lowerText.includes('–∫–∞–∫–æ–µ —á–∏—Å–ª–æ') || lowerText.includes('—Å–µ–≥–æ–¥–Ω—è')) {
    const now = new Date();
    const date = now.toLocaleDateString('ru-RU', { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
    return {
      isCommand: true,
      response: `üìÖ –°–µ–≥–æ–¥–Ω—è ${date}`,
      type: 'date'
    };
  }

  if (lowerText.includes('–ø–æ—Å—á–∏—Ç–∞–π') || lowerText.includes('–≤—ã—á–∏—Å–ª–∏') || /\d+\s*[\+\-\*\/]\s*\d+/.test(lowerText)) {
    try {
      const mathExpr = lowerText
        .replace(/–ø–æ—Å—á–∏—Ç–∞–π|–≤—ã—á–∏—Å–ª–∏/g, '')
        .replace(/–ø–ª—é—Å/g, '+')
        .replace(/–º–∏–Ω—É—Å/g, '-')
        .replace(/—É–º–Ω–æ–∂–∏—Ç—å –Ω–∞|—É–º–Ω–æ–∂–µ–Ω–Ω–æ–µ –Ω–∞/g, '*')
        .replace(/—Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞|–¥–µ–ª—ë–Ω–Ω–æ–µ –Ω–∞/g, '/')
        .replace(/[^\d\+\-\*\/\.\(\)]/g, '');
      
      const result = eval(mathExpr);
      return {
        isCommand: true,
        response: `üî¢ ${lowerText.replace(/–ø–æ—Å—á–∏—Ç–∞–π|–≤—ã—á–∏—Å–ª–∏/g, '').trim()} = ${result}`,
        type: 'calc'
      };
    } catch {
      return { isCommand: false };
    }
  }

  if (lowerText.includes('–∑–∞–ø–æ–º–Ω–∏')) {
    const noteText = text.replace(/–∑–∞–ø–æ–º–Ω–∏/i, '').trim();
    if (noteText) {
      notes.push(noteText);
      return {
        isCommand: true,
        response: `üíæ –ó–∞–ø–æ–º–Ω–∏–ª: ${noteText}`,
        type: 'note'
      };
    }
  }

  if (lowerText.includes('—á—Ç–æ —Ç—ã –∑–∞–ø–æ–º–Ω–∏–ª') || lowerText.includes('–ø–æ–∫–∞–∂–∏ –∑–∞–º–µ—Ç–∫–∏') || lowerText.includes('—Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫')) {
    if (notes.length === 0) {
      return {
        isCommand: true,
        response: 'üìù –ó–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç',
        type: 'list'
      };
    }
    const notesList = notes.map((note, i) => `${i + 1}. ${note}`).join('\n');
    return {
      isCommand: true,
      response: `üìù –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏:\n${notesList}`,
      type: 'list'
    };
  }

  if (lowerText.includes('–æ—á–∏—Å—Ç–∏ –∑–∞–º–µ—Ç–∫–∏') || lowerText.includes('—É–¥–∞–ª–∏ –∑–∞–º–µ—Ç–∫–∏') || lowerText.includes('–∑–∞–±—É–¥—å –≤—Å—ë')) {
    const count = notes.length;
    notes.length = 0;
    return {
      isCommand: true,
      response: `üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫: ${count}`,
      type: 'clear'
    };
  }

  return { isCommand: false };
}

export function getNotesCount(): number {
  return notes.length;
}
