import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import Icon from '@/components/ui/icon';

interface VoiceCommand {
  command: string;
  action: string;
  response: string;
  icon: string;
}

const voiceCommands: VoiceCommand[] = [
  { command: '–≤—Ä–µ–º—è', action: 'show_time', response: '', icon: 'Clock' },
  { command: '–¥–∞—Ç–∞', action: 'show_date', response: '', icon: 'Calendar' },
  { command: '–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', action: 'calculator', response: '', icon: 'Calculator' },
  { command: '–ø–µ—Ä–µ–≤–µ–¥–∏', action: 'translate', response: '', icon: 'Languages' },
  { command: '–ø–æ—Å—á–∏—Ç–∞–π', action: 'calculate', response: '', icon: 'Hash' },
  { command: '–∑–∞–ø–æ–º–Ω–∏', action: 'remember', response: '', icon: 'Brain' },
  { command: '–ø–æ–≥–æ–¥–∞', action: 'weather', response: '', icon: 'Cloud' },
];

export default function VoiceCommandsPanel() {
  const [isListening, setIsListening] = useState(false);
  const [lastCommand, setLastCommand] = useState('');
  const [response, setResponse] = useState('');
  const [notes, setNotes] = useState<string[]>([]);

  useEffect(() => {
    const savedNotes = localStorage.getItem('voice_notes');
    if (savedNotes) {
      setNotes(JSON.parse(savedNotes));
    }
  }, []);

  const executeCommand = (transcript: string) => {
    const lower = transcript.toLowerCase();
    
    if (lower.includes('–≤—Ä–µ–º—è')) {
      const time = new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
      setResponse(`‚è∞ –°–µ–π—á–∞—Å ${time}`);
      speak(`–°–µ–π—á–∞—Å ${time}`);
    } 
    else if (lower.includes('–¥–∞—Ç–∞')) {
      const date = new Date().toLocaleDateString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' });
      setResponse(`üìÖ –°–µ–≥–æ–¥–Ω—è ${date}`);
      speak(`–°–µ–≥–æ–¥–Ω—è ${date}`);
    }
    else if (lower.includes('–ø–æ—Å—á–∏—Ç–∞–π') || lower.includes('–≤—ã—á–∏—Å–ª–∏')) {
      const mathExpression = lower.replace(/–ø–æ—Å—á–∏—Ç–∞–π|–≤—ã—á–∏—Å–ª–∏|—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç/gi, '').trim();
      try {
        const result = evaluateMath(mathExpression);
        setResponse(`üî¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}`);
        speak(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}`);
      } catch {
        setResponse('‚ùå –ù–µ –º–æ–≥—É –≤—ã—á–∏—Å–ª–∏—Ç—å');
      }
    }
    else if (lower.includes('–∑–∞–ø–æ–º–Ω–∏')) {
      const note = transcript.replace(/–∑–∞–ø–æ–º–Ω–∏/gi, '').trim();
      const newNotes = [...notes, note];
      setNotes(newNotes);
      localStorage.setItem('voice_notes', JSON.stringify(newNotes));
      setResponse(`üíæ –ó–∞–ø–æ–º–Ω–∏–ª: ${note}`);
      speak('–ó–∞–ø–æ–º–Ω–∏–ª');
    }
    else if (lower.includes('—á—Ç–æ —Ç—ã –∑–∞–ø–æ–º–Ω–∏–ª') || lower.includes('–º–æ–∏ –∑–∞–º–µ—Ç–∫–∏')) {
      if (notes.length === 0) {
        setResponse('üìù –ó–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç');
        speak('–£ –º–µ–Ω—è –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫');
      } else {
        setResponse(`üìù –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n${notes.map((n, i) => `${i + 1}. ${n}`).join('\n')}`);
        speak(`–£ –≤–∞—Å ${notes.length} –∑–∞–º–µ—Ç–æ–∫`);
      }
    }
    else if (lower.includes('–æ—á–∏—Å—Ç–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏')) {
      setNotes([]);
      localStorage.removeItem('voice_notes');
      setResponse('üóëÔ∏è –ó–∞–º–µ—Ç–∫–∏ –æ—á–∏—â–µ–Ω—ã');
      speak('–ó–∞–º–µ—Ç–∫–∏ –æ—á–∏—â–µ–Ω—ã');
    }
    else {
      setResponse(`‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: "${transcript}"`);
    }
  };

  const evaluateMath = (expr: string): number => {
    const russianToEnglish: Record<string, string> = {
      '–ø–ª—é—Å': '+',
      '–º–∏–Ω—É—Å': '-',
      '—É–º–Ω–æ–∂–∏—Ç—å –Ω–∞': '*',
      '—Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞': '/',
      '—É–º–Ω–æ–∂–∏—Ç—å': '*',
      '—Ä–∞–∑–¥–µ–ª–∏—Ç—å': '/',
      '–æ–¥–∏–Ω': '1', '–¥–≤–∞': '2', '—Ç—Ä–∏': '3', '—á–µ—Ç—ã—Ä–µ': '4', '–ø—è—Ç—å': '5',
      '—à–µ—Å—Ç—å': '6', '—Å–µ–º—å': '7', '–≤–æ—Å–µ–º—å': '8', '–¥–µ–≤—è—Ç—å': '9', '–¥–µ—Å—è—Ç—å': '10'
    };

    let processedExpr = expr;
    Object.entries(russianToEnglish).forEach(([rus, eng]) => {
      processedExpr = processedExpr.replace(new RegExp(rus, 'gi'), eng);
    });

    processedExpr = processedExpr.replace(/[^0-9+\-*/().\s]/g, '');
    
    return Function(`'use strict'; return (${processedExpr})`)();
  };

  const speak = (text: string) => {
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = 'ru-RU';
    utterance.rate = 1.0;
    window.speechSynthesis.speak(utterance);
  };

  const startListening = () => {
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
      alert('–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ');
      return;
    }

    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
    const recognition = new SpeechRecognition();
    
    recognition.lang = 'ru-RU';
    recognition.continuous = false;
    recognition.interimResults = false;

    recognition.onstart = () => {
      setIsListening(true);
      setLastCommand('');
      setResponse('üé§ –°–ª—É—à–∞—é...');
    };

    recognition.onresult = (event: any) => {
      const transcript = event.results[0][0].transcript;
      setLastCommand(transcript);
      executeCommand(transcript);
      setIsListening(false);
    };

    recognition.onerror = () => {
      setIsListening(false);
      setResponse('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è');
    };

    recognition.onend = () => {
      setIsListening(false);
    };

    recognition.start();
  };

  return (
    <div className="fixed bottom-6 left-6 z-50">
      <Card className="w-80 p-4 dark:bg-gray-900 border-2 border-indigo-200 dark:border-indigo-800 shadow-xl">
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center gap-2">
            <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-indigo-500 to-purple-600 flex items-center justify-center">
              <Icon name="Mic" className="text-white" size={16} />
            </div>
            <h3 className="font-bold text-gray-900 dark:text-white">üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã</h3>
          </div>
        </div>

        <Button
          onClick={startListening}
          disabled={isListening}
          className={`w-full mb-3 ${isListening ? 'bg-red-500 hover:bg-red-600 animate-pulse' : 'bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700'}`}
        >
          <Icon name={isListening ? "MicOff" : "Mic"} className="mr-2" size={18} />
          {isListening ? '–°–ª—É—à–∞—é...' : '–ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É'}
        </Button>

        {lastCommand && (
          <div className="mb-2 p-2 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
            <p className="text-xs text-gray-600 dark:text-gray-400">–ö–æ–º–∞–Ω–¥–∞:</p>
            <p className="text-sm font-semibold text-blue-700 dark:text-blue-300">"{lastCommand}"</p>
          </div>
        )}

        {response && (
          <div className="mb-3 p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg">
            <p className="text-sm text-gray-700 dark:text-gray-300 whitespace-pre-wrap">{response}</p>
          </div>
        )}

        <div className="space-y-1">
          <p className="text-xs font-semibold text-gray-500 dark:text-gray-400 mb-2">–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</p>
          <div className="grid grid-cols-2 gap-1 text-xs">
            <div className="flex items-center gap-1">
              <Icon name="Clock" size={12} className="text-indigo-500" />
              <span className="text-gray-600 dark:text-gray-400">–≤—Ä–µ–º—è</span>
            </div>
            <div className="flex items-center gap-1">
              <Icon name="Calendar" size={12} className="text-purple-500" />
              <span className="text-gray-600 dark:text-gray-400">–¥–∞—Ç–∞</span>
            </div>
            <div className="flex items-center gap-1">
              <Icon name="Calculator" size={12} className="text-green-500" />
              <span className="text-gray-600 dark:text-gray-400">–ø–æ—Å—á–∏—Ç–∞–π</span>
            </div>
            <div className="flex items-center gap-1">
              <Icon name="Brain" size={12} className="text-orange-500" />
              <span className="text-gray-600 dark:text-gray-400">–∑–∞–ø–æ–º–Ω–∏</span>
            </div>
          </div>
        </div>
      </Card>
    </div>
  );
}
