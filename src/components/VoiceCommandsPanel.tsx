import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import Icon from '@/components/ui/icon';

export default function VoiceCommandsPanel() {
  const [isListening, setIsListening] = useState(false);
  const [lastCommand, setLastCommand] = useState('');
  const [response, setResponse] = useState('');
  const [notes, setNotes] = useState<string[]>([]);
  const [isMinimized, setIsMinimized] = useState(true);

  useEffect(() => {
    const savedNotes = localStorage.getItem('voice_notes');
    if (savedNotes) {
      setNotes(JSON.parse(savedNotes));
    }
  }, []);

  const executeCommand = (transcript: string) => {
    const lower = transcript.toLowerCase();
    
    if (lower.includes('–≤—Ä–µ–º—è') || lower.includes('—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏')) {
      const time = new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
      setResponse(`‚è∞ –°–µ–π—á–∞—Å ${time}`);
      speak(`–°–µ–π—á–∞—Å ${time}`);
      return;
    }
    
    if (lower.includes('–¥–∞—Ç–∞') || lower.includes('–∫–∞–∫–æ–µ —á–∏—Å–ª–æ') || lower.includes('–∫–∞–∫–æ–π –¥–µ–Ω—å')) {
      const date = new Date().toLocaleDateString('ru-RU', { 
        weekday: 'long',
        day: 'numeric', 
        month: 'long', 
        year: 'numeric' 
      });
      setResponse(`üìÖ –°–µ–≥–æ–¥–Ω—è ${date}`);
      speak(`–°–µ–≥–æ–¥–Ω—è ${date}`);
      return;
    }
    
    if (lower.includes('–ø–æ—Å—á–∏—Ç–∞–π') || lower.includes('–≤—ã—á–∏—Å–ª–∏') || lower.includes('—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç')) {
      const mathExpression = lower
        .replace(/–ø–æ—Å—á–∏—Ç–∞–π|–≤—ã—á–∏—Å–ª–∏|—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç/gi, '')
        .trim();
      try {
        const result = evaluateMath(mathExpression);
        setResponse(`üî¢ ${mathExpression} = ${result}`);
        speak(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}`);
        return;
      } catch (e) {
        setResponse(`‚ùå –ù–µ –º–æ–≥—É –≤—ã—á–∏—Å–ª–∏—Ç—å "${mathExpression}"`);
        speak('–ù–µ –º–æ–≥—É –≤—ã—á–∏—Å–ª–∏—Ç—å');
        return;
      }
    }
    
    if (lower.includes('–∑–∞–ø–æ–º–Ω–∏')) {
      const note = transcript.replace(/–∑–∞–ø–æ–º–Ω–∏/gi, '').trim();
      if (note) {
        const newNotes = [...notes, note];
        setNotes(newNotes);
        localStorage.setItem('voice_notes', JSON.stringify(newNotes));
        setResponse(`üíæ –ó–∞–ø–æ–º–Ω–∏–ª: "${note}"`);
        speak('–ó–∞–ø–æ–º–Ω–∏–ª');
        return;
      }
    }
    
    if (lower.includes('—á—Ç–æ —Ç—ã –∑–∞–ø–æ–º–Ω–∏–ª') || lower.includes('–º–æ–∏ –∑–∞–º–µ—Ç–∫–∏') || lower.includes('–ø–æ–∫–∞–∂–∏ –∑–∞–º–µ—Ç–∫–∏')) {
      if (notes.length === 0) {
        setResponse('üìù –ó–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç');
        speak('–£ –º–µ–Ω—è –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫');
      } else {
        setResponse(`üìù –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ (${notes.length}):\n\n${notes.map((n, i) => `${i + 1}. ${n}`).join('\n')}`);
        speak(`–£ –≤–∞—Å ${notes.length} ${notes.length === 1 ? '–∑–∞–º–µ—Ç–∫–∞' : notes.length < 5 ? '–∑–∞–º–µ—Ç–∫–∏' : '–∑–∞–º–µ—Ç–æ–∫'}`);
      }
      return;
    }
    
    if (lower.includes('–æ—á–∏—Å—Ç–∏ –∑–∞–º–µ—Ç–∫–∏') || lower.includes('—É–¥–∞–ª–∏ –∑–∞–º–µ—Ç–∫–∏') || lower.includes('–æ—á–∏—Å—Ç–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏')) {
      setNotes([]);
      localStorage.removeItem('voice_notes');
      setResponse('üóëÔ∏è –í—Å–µ –∑–∞–º–µ—Ç–∫–∏ –æ—á–∏—â–µ–Ω—ã');
      speak('–ó–∞–º–µ—Ç–∫–∏ –æ—á–∏—â–µ–Ω—ã');
      return;
    }

    if (lower.includes('–ø—Ä–∏–≤–µ—Ç') || lower.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π')) {
      setResponse('üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å');
      speak('–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å');
      return;
    }

    setResponse(`‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: "${transcript}"\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: –≤—Ä–µ–º—è, –¥–∞—Ç–∞, –ø–æ—Å—á–∏—Ç–∞–π, –∑–∞–ø–æ–º–Ω–∏`);
    speak('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞');
  };

  const evaluateMath = (expr: string): number => {
    const russianToEnglish: Record<string, string> = {
      '–ø–ª—é—Å': '+',
      '–º–∏–Ω—É—Å': '-',
      '—É–º–Ω–æ–∂–∏—Ç—å –Ω–∞': '*',
      '—É–º–Ω–æ–∂–∏—Ç—å': '*',
      '—Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞': '/',
      '—Ä–∞–∑–¥–µ–ª–∏—Ç—å': '/',
      '–Ω–æ–ª—å': '0',
      '–æ–¥–∏–Ω': '1',
      '–¥–≤–∞': '2',
      '—Ç—Ä–∏': '3',
      '—á–µ—Ç—ã—Ä–µ': '4',
      '–ø—è—Ç—å': '5',
      '—à–µ—Å—Ç—å': '6',
      '—Å–µ–º—å': '7',
      '–≤–æ—Å–µ–º—å': '8',
      '–¥–µ–≤—è—Ç—å': '9',
      '–¥–µ—Å—è—Ç—å': '10',
      '–¥–≤–∞–¥—Ü–∞—Ç—å': '20',
      '—Ç—Ä–∏–¥—Ü–∞—Ç—å': '30',
      '—Å–æ—Ä–æ–∫': '40',
      '–ø—è—Ç—å–¥–µ—Å—è—Ç': '50',
      '—Å—Ç–æ': '100'
    };

    let processedExpr = expr.toLowerCase();
    
    Object.entries(russianToEnglish).forEach(([rus, eng]) => {
      processedExpr = processedExpr.replace(new RegExp(rus, 'gi'), ` ${eng} `);
    });

    processedExpr = processedExpr.replace(/[^0-9+\-*/().\s]/g, '').trim();
    
    if (!processedExpr) {
      throw new Error('Empty expression');
    }

    try {
      const result = Function(`'use strict'; return (${processedExpr})`)();
      return Math.round(result * 100) / 100;
    } catch (e) {
      throw new Error('Invalid expression');
    }
  };

  const speak = (text: string) => {
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = 'ru-RU';
    utterance.rate = 1.0;
    utterance.pitch = 1.0;
    window.speechSynthesis.cancel();
    window.speechSynthesis.speak(utterance);
  };

  const startListening = () => {
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
      alert('–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ');
      return;
    }

    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
    const recognition = new SpeechRecognition();
    
    recognition.lang = 'ru-RU';
    recognition.continuous = false;
    recognition.interimResults = false;

    recognition.onstart = () => {
      setIsListening(true);
      setLastCommand('');
      setResponse('üé§ –°–ª—É—à–∞—é –∫–æ–º–∞–Ω–¥—É...');
      setIsMinimized(false);
    };

    recognition.onresult = (event: any) => {
      const transcript = event.results[0][0].transcript;
      setLastCommand(transcript);
      executeCommand(transcript);
      setIsListening(false);
    };

    recognition.onerror = (event: any) => {
      setIsListening(false);
      setResponse(`‚ùå –û—à–∏–±–∫–∞: ${event.error === 'no-speech' ? '–Ω–∏—á–µ–≥–æ –Ω–µ —É—Å–ª—ã—à–∞–ª' : '–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å'}`);
    };

    recognition.onend = () => {
      setIsListening(false);
    };

    recognition.start();
  };

  if (isMinimized) {
    return (
      <div className="fixed bottom-6 left-6 z-50">
        <Button
          onClick={() => setIsMinimized(false)}
          className="rounded-full w-14 h-14 bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 shadow-lg"
        >
          <Icon name="Mic" size={24} />
        </Button>
      </div>
    );
  }

  return (
    <div className="fixed bottom-6 left-6 z-50">
      <Card className="w-80 p-4 dark:bg-gray-900 border-2 border-indigo-200 dark:border-indigo-800 shadow-xl animate-slide-up">
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center gap-2">
            <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-indigo-500 to-purple-600 flex items-center justify-center">
              <Icon name="Mic" className="text-white" size={16} />
            </div>
            <h3 className="font-bold text-gray-900 dark:text-white">üéôÔ∏è –ö–æ–º–∞–Ω–¥—ã</h3>
          </div>
          <Button variant="ghost" size="sm" onClick={() => setIsMinimized(true)}>
            <Icon name="Minus" size={16} />
          </Button>
        </div>

        <Button
          onClick={startListening}
          disabled={isListening}
          className={`w-full mb-3 ${isListening ? 'bg-red-500 hover:bg-red-600 animate-pulse' : 'bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700'}`}
        >
          <Icon name={isListening ? "MicOff" : "Mic"} className="mr-2" size={18} />
          {isListening ? '–°–ª—É—à–∞—é...' : '–ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞'}
        </Button>

        {lastCommand && (
          <div className="mb-2 p-2 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
            <p className="text-xs text-gray-600 dark:text-gray-400 mb-1">–í—ã —Å–∫–∞–∑–∞–ª–∏:</p>
            <p className="text-sm font-semibold text-blue-700 dark:text-blue-300">"{lastCommand}"</p>
          </div>
        )}

        {response && (
          <div className="mb-3 p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg border border-purple-200 dark:border-purple-800">
            <p className="text-sm text-gray-700 dark:text-gray-300 whitespace-pre-wrap font-medium">{response}</p>
          </div>
        )}

        <div className="space-y-2">
          <p className="text-xs font-semibold text-gray-500 dark:text-gray-400 mb-2">–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:</p>
          <div className="space-y-1 text-xs">
            <div className="flex items-center gap-2 p-1.5 rounded bg-gray-50 dark:bg-gray-800">
              <Icon name="Clock" size={12} className="text-indigo-500" />
              <span className="text-gray-600 dark:text-gray-400">"–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏?"</span>
            </div>
            <div className="flex items-center gap-2 p-1.5 rounded bg-gray-50 dark:bg-gray-800">
              <Icon name="Calendar" size={12} className="text-purple-500" />
              <span className="text-gray-600 dark:text-gray-400">"–ö–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –¥–∞—Ç–∞?"</span>
            </div>
            <div className="flex items-center gap-2 p-1.5 rounded bg-gray-50 dark:bg-gray-800">
              <Icon name="Calculator" size={12} className="text-green-500" />
              <span className="text-gray-600 dark:text-gray-400">"–ü–æ—Å—á–∏—Ç–∞–π –¥–≤–∞ –ø–ª—é—Å —Ç—Ä–∏"</span>
            </div>
            <div className="flex items-center gap-2 p-1.5 rounded bg-gray-50 dark:bg-gray-800">
              <Icon name="Brain" size={12} className="text-orange-500" />
              <span className="text-gray-600 dark:text-gray-400">"–ó–∞–ø–æ–º–Ω–∏ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ"</span>
            </div>
          </div>
        </div>

        {notes.length > 0 && (
          <div className="mt-3 p-2 bg-amber-50 dark:bg-amber-900/20 rounded-lg border border-amber-200 dark:border-amber-800">
            <div className="flex items-center justify-between mb-1">
              <p className="text-xs font-semibold text-amber-700 dark:text-amber-300">
                üìù –ó–∞–º–µ—Ç–æ–∫: {notes.length}
              </p>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => {
                  setNotes([]);
                  localStorage.removeItem('voice_notes');
                  setResponse('üóëÔ∏è –ó–∞–º–µ—Ç–∫–∏ –æ—á–∏—â–µ–Ω—ã');
                }}
                className="h-6 px-2 text-xs"
              >
                –û—á–∏—Å—Ç–∏—Ç—å
              </Button>
            </div>
          </div>
        )}
      </Card>
    </div>
  );
}
