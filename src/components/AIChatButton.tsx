import { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import Icon from '@/components/ui/icon';
import { useToast } from '@/hooks/use-toast';
import AIChatHeader from '@/components/chat/AIChatHeader';
import AIChatMessages, { Message } from '@/components/chat/AIChatMessages';
import AIChatInput from '@/components/chat/AIChatInput';
import AIChatStats from '@/components/chat/AIChatStats';

interface AIChatButtonProps {
  className?: string;
  apiKey?: string;
  model?: string;
}

export default function AIChatButton({ 
  className = '',
  apiKey,
  model = 'google/gemini-2.0-flash-exp:free'
}: AIChatButtonProps) {
  const [showChat, setShowChat] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showQuickPrompts, setShowQuickPrompts] = useState(true);
  const [totalTokens, setTotalTokens] = useState(0);
  const [uploadedFiles, setUploadedFiles] = useState<{name: string; content: string}[]>([]);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    const saved = localStorage.getItem('ai_chat_history');
    if (saved) {
      try {
        const parsed = JSON.parse(saved);
        setMessages(parsed);
      } catch (e) {
        console.error('Failed to load chat history:', e);
      }
    }
  }, []);

  useEffect(() => {
    if (messages.length > 0) {
      localStorage.setItem('ai_chat_history', JSON.stringify(messages));
    }
  }, [messages]);

  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (!files || files.length === 0) return;

    const newFiles: {name: string; content: string}[] = [];
    
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      if (file.size > 5 * 1024 * 1024) {
        toast({
          title: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π',
          description: `${file.name} –ø—Ä–µ–≤—ã—à–∞–µ—Ç 5 –ú–ë`,
          variant: 'destructive'
        });
        continue;
      }

      try {
        const text = await file.text();
        newFiles.push({ name: file.name, content: text });
      } catch (error) {
        toast({
          title: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞',
          description: file.name,
          variant: 'destructive'
        });
      }
    }

    if (newFiles.length > 0) {
      setUploadedFiles(prev => [...prev, ...newFiles]);
      toast({
        title: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${newFiles.length}`,
        description: newFiles.map(f => f.name).join(', ')
      });
    }
    
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const removeFile = (index: number) => {
    setUploadedFiles(prev => prev.filter((_, i) => i !== index));
    toast({ title: '–§–∞–π–ª —É–¥–∞–ª—ë–Ω' });
  };

  const sendMessage = async (customMessage?: string) => {
    const messageToSend = customMessage || input;
    if (!messageToSend.trim() && uploadedFiles.length === 0) return;

    const storedApiKey = apiKey || localStorage.getItem('openrouter_api_key');
    
    if (!storedApiKey) {
      toast({
        title: 'API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
        description: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ OpenRouter API –∫–ª—é—á –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏',
        variant: 'destructive'
      });
      return;
    }

    let fullContent = messageToSend;
    if (uploadedFiles.length > 0) {
      fullContent += '\n\nüìé –ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n\n';
      uploadedFiles.forEach(file => {
        fullContent += `--- ${file.name} ---\n${file.content}\n\n`;
      });
    }

    const userMessage: Message = { 
      role: 'user', 
      content: fullContent,
      timestamp: Date.now(),
      files: uploadedFiles.length > 0 ? [...uploadedFiles] : undefined
    };
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setUploadedFiles([]);
    setIsLoading(true);
    setShowQuickPrompts(false);

    try {
      const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${storedApiKey}`,
          'Content-Type': 'application/json',
          'HTTP-Referer': window.location.origin,
          'X-Title': 'AI Chat Assistant'
        },
        body: JSON.stringify({
          model: model,
          messages: [...messages, userMessage].map(m => ({
            role: m.role,
            content: m.content
          }))
        })
      });

      if (!response.ok) {
        let errorMsg = 'API request failed';
        try {
          const error = await response.json();
          errorMsg = error.error?.message || error.message || errorMsg;
        } catch (e) {
          errorMsg = `HTTP ${response.status}`;
        }
        
        if (response.status === 401) {
          throw new Error('API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∞ openrouter.ai/keys');
        }
        
        throw new Error(errorMsg);
      }

      const data = await response.json();
      const aiResponse: Message = {
        role: 'assistant',
        content: data.choices[0].message.content,
        timestamp: Date.now()
      };

      if (data.usage) {
        setTotalTokens(prev => prev + (data.usage.total_tokens || 0));
      }

      setMessages(prev => [...prev, aiResponse]);
      
      toast({
        title: '–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!',
        description: `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${data.usage?.total_tokens || 0}`,
      });
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç';
      
      let userFriendlyMessage = errorMessage;
      let diagnosticTips = '';
      
      if (errorMessage.includes('401') || errorMessage.includes('Unauthorized')) {
        userFriendlyMessage = 'API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω';
        diagnosticTips = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏';
      } else if (errorMessage.includes('402') || errorMessage.includes('credits')) {
        userFriendlyMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤';
        diagnosticTips = '–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ openrouter.ai';
      } else if (errorMessage.includes('404')) {
        userFriendlyMessage = '–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
        diagnosticTips = '–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö';
      } else if (errorMessage.includes('429')) {
        userFriendlyMessage = '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤';
        diagnosticTips = '–ü–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥';
      } else if (errorMessage.includes('503')) {
        userFriendlyMessage = '–ú–æ–¥–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
        diagnosticTips = '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ DeepSeek Chat –∏–ª–∏ Llama 3';
      }
      
      toast({
        title: '‚ùå ' + userFriendlyMessage,
        description: diagnosticTips || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏',
        variant: 'destructive',
        duration: 5000
      });
      
      const errorMsg: Message = {
        role: 'assistant',
        content: `‚ùå ${userFriendlyMessage}\n\nüí° ${diagnosticTips || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'}`,
        timestamp: Date.now()
      };
      setMessages(prev => [...prev, errorMsg]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const handleQuickPrompt = (promptText: string) => {
    setInput(promptText + ' ');
    setShowQuickPrompts(false);
  };

  const clearHistory = () => {
    setMessages([]);
    localStorage.removeItem('ai_chat_history');
    setTotalTokens(0);
    setShowQuickPrompts(true);
    toast({ title: '–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞' });
  };

  const copyMessage = (content: string) => {
    navigator.clipboard.writeText(content);
    toast({ title: '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞' });
  };

  const exportChat = () => {
    const chatData = messages.map(m => `${m.role === 'user' ? '–í—ã' : 'AI'}: ${m.content}`).join('\n\n');
    const blob = new Blob([chatData], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `ai-chat-${Date.now()}.txt`;
    a.click();
    toast({ title: '–ß–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω' });
  };

  if (showChat) {
    return (
      <Card className="fixed bottom-6 right-6 z-50 w-96 h-[600px] bg-white dark:bg-gray-800 shadow-2xl flex flex-col animate-scale-in">
        <AIChatHeader
          model={model}
          onExport={exportChat}
          onClear={clearHistory}
          onClose={() => setShowChat(false)}
        />

        <AIChatStats
          totalTokens={totalTokens}
          messageCount={messages.length}
        />

        <AIChatMessages
          messages={messages}
          isLoading={isLoading}
          messagesEndRef={messagesEndRef}
          onCopyMessage={copyMessage}
          showQuickPrompts={showQuickPrompts}
          onQuickPrompt={handleQuickPrompt}
        />

        <AIChatInput
          input={input}
          isLoading={isLoading}
          uploadedFiles={uploadedFiles}
          fileInputRef={fileInputRef}
          onInputChange={setInput}
          onKeyPress={handleKeyPress}
          onSend={() => sendMessage()}
          onFileUpload={handleFileUpload}
          onRemoveFile={removeFile}
        />
      </Card>
    );
  }

  return (
    <Button
      onClick={() => setShowChat(true)}
      size="lg"
      className={`fixed bottom-6 right-6 z-40 rounded-full w-16 h-16 shadow-2xl bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 hover:scale-110 transition-transform ${className}`}
      title="–û—Ç–∫—Ä—ã—Ç—å AI-—á–∞—Ç"
    >
      <Icon name="Bot" size={28} />
    </Button>
  );
}
