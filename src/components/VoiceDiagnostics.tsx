import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import Icon from '@/components/ui/icon';
import { useLanguage } from '@/contexts/LanguageContext';

export default function VoiceDiagnostics() {
  const [availableVoices, setAvailableVoices] = useState<SpeechSynthesisVoice[]>([]);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [selectedVoice, setSelectedVoice] = useState<string>('');
  const { voiceLanguage, voiceSpeed, voiceGender, favoriteVoiceName, setFavoriteVoiceName } = useLanguage();

  useEffect(() => {
    const loadVoices = () => {
      const voices = window.speechSynthesis.getVoices();
      setAvailableVoices(voices);
      console.log('Available voices:', voices.length);
    };

    loadVoices();
    
    if (window.speechSynthesis.onvoiceschanged !== undefined) {
      window.speechSynthesis.onvoiceschanged = loadVoices;
    }

    return () => {
      window.speechSynthesis.cancel();
    };
  }, []);

  const testVoice = (voice?: SpeechSynthesisVoice) => {
    window.speechSynthesis.cancel();
    setIsSpeaking(true);

    const testTexts: Record<string, string> = {
      'ru': '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –æ–∑–≤—É—á–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –°–µ–π—á–∞—Å –≤—ã —Å–ª—ã—à–∏—Ç–µ –º–æ–π –≥–æ–ª–æ—Å.',
      'en': 'Hello! This is a test of English text-to-speech. You are now hearing my voice.',
      'es': '¬°Hola! Esta es una prueba de texto a voz en espa√±ol. Ahora est√°s escuchando mi voz.',
      'fr': 'Bonjour! Ceci est un test de synth√®se vocale en fran√ßais. Vous entendez maintenant ma voix.',
      'de': 'Hallo! Dies ist ein Test der deutschen Sprachsynthese. Sie h√∂ren jetzt meine Stimme.',
      'uk': '–ü—Ä–∏–≤—ñ—Ç! –¶–µ —Ç–µ—Å—Ç–æ–≤–∞ –æ–∑–≤—É—á–∫–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç—É. –ó–∞—Ä–∞–∑ –≤–∏ —á—É—î—Ç–µ –º—ñ–π –≥–æ–ª–æ—Å.'
    };

    const langCode = voice ? voice.lang.split('-')[0] : voiceLanguage.split('-')[0];
    const testText = testTexts[langCode] || testTexts['en'];

    const utterance = new SpeechSynthesisUtterance(testText);
    utterance.lang = voice ? voice.lang : voiceLanguage;
    utterance.rate = voiceSpeed;
    utterance.pitch = voiceGender === 'male' ? 0.85 : 1.1;
    utterance.volume = 1.0;

    if (voice) {
      utterance.voice = voice;
      setSelectedVoice(voice.name);
    }

    utterance.onend = () => {
      setIsSpeaking(false);
      setSelectedVoice('');
    };

    utterance.onerror = () => {
      setIsSpeaking(false);
      setSelectedVoice('');
    };

    window.speechSynthesis.speak(utterance);
  };

  const stopSpeaking = () => {
    window.speechSynthesis.cancel();
    setIsSpeaking(false);
    setSelectedVoice('');
  };

  const saveFavoriteVoice = (voiceName: string) => {
    setFavoriteVoiceName(voiceName);
  };

  const removeFavoriteVoice = () => {
    setFavoriteVoiceName(null);
  };

  const langCode = voiceLanguage.split('-')[0];
  const relevantVoices = availableVoices.filter(v => 
    v.lang.toLowerCase().startsWith(langCode)
  );

  const maleVoices = relevantVoices.filter(v => 
    /male|man|–º—É–∂—Å–∫–æ–π|–º—É–∂—á–∏–Ω–∞|matthew|dmitry|yuri|–∞–Ω–¥—Ä–µ–π|–∞—Ä—Ç–µ–º/i.test(v.name)
  );

  const femaleVoices = relevantVoices.filter(v => 
    /female|woman|–∂–µ–Ω—Å–∫–∏–π|–∂–µ–Ω—â–∏–Ω–∞|alice|oksana|–∫–∞—Ç—è|–º–∏–ª–µ–Ω–∞|samantha|victoria/i.test(v.name)
  );

  const otherVoices = relevantVoices.filter(v => 
    !maleVoices.includes(v) && !femaleVoices.includes(v)
  );

  return (
    <Card className="p-6 dark:bg-gray-900">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-bold text-gray-900 dark:text-white">
          üîä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤
        </h3>
        {isSpeaking && (
          <Button onClick={stopSpeaking} variant="destructive" size="sm">
            <Icon name="Square" className="mr-2" size={16} />
            –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
          </Button>
        )}
      </div>

      <div className="space-y-4">
        <div className="p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
          <p className="text-sm font-semibold text-blue-900 dark:text-blue-100 mb-2">
            –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
          </p>
          <div className="space-y-1 text-xs text-blue-700 dark:text-blue-300">
            <p>‚Ä¢ –Ø–∑—ã–∫: {voiceLanguage}</p>
            <p>‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {voiceSpeed}x</p>
            <p>‚Ä¢ –ü–æ–ª: {voiceGender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}</p>
            <p>‚Ä¢ –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: {availableVoices.length}</p>
            <p>‚Ä¢ –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö: {relevantVoices.length}</p>
            {favoriteVoiceName && <p>‚Ä¢ ‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–π: {favoriteVoiceName}</p>}
          </div>
        </div>

        <div>
          <Button 
            onClick={() => testVoice()} 
            disabled={isSpeaking}
            className="w-full mb-3"
          >
            <Icon name="Play" className="mr-2" size={16} />
            –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
          </Button>
        </div>

        {maleVoices.length > 0 && (
          <div>
            <h4 className="text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2">
              üë® –ú—É–∂—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞ ({maleVoices.length})
            </h4>
            <div className="space-y-2">
              {maleVoices.map((voice) => (
                <div 
                  key={voice.name}
                  className={`flex items-center justify-between p-2 rounded border ${
                    selectedVoice === voice.name 
                      ? 'bg-indigo-100 dark:bg-indigo-900/30 border-indigo-500' 
                      : 'bg-gray-50 dark:bg-gray-800 border-gray-200 dark:border-gray-700'
                  }`}
                >
                  <div className="flex-1 min-w-0">
                    <p className="text-xs font-medium text-gray-900 dark:text-white truncate">
                      {voice.name}
                    </p>
                    <p className="text-xs text-gray-500 dark:text-gray-400">
                      {voice.lang} ‚Ä¢ {voice.localService ? '–õ–æ–∫–∞–ª—å–Ω—ã–π' : '–û–±–ª–∞—á–Ω—ã–π'}
                    </p>
                  </div>
                  <Button 
                    onClick={() => testVoice(voice)} 
                    disabled={isSpeaking && selectedVoice !== voice.name}
                    size="sm"
                    variant="ghost"
                  >
                    <Icon name={selectedVoice === voice.name ? "Volume2" : "Play"} size={14} />
                  </Button>
                </div>
              ))}
            </div>
          </div>
        )}

        {femaleVoices.length > 0 && (
          <div>
            <h4 className="text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2">
              üë© –ñ–µ–Ω—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞ ({femaleVoices.length})
            </h4>
            <div className="space-y-2">
              {femaleVoices.map((voice) => (
                <div 
                  key={voice.name}
                  className={`flex items-center justify-between p-2 rounded border ${
                    selectedVoice === voice.name 
                      ? 'bg-purple-100 dark:bg-purple-900/30 border-purple-500' 
                      : 'bg-gray-50 dark:bg-gray-800 border-gray-200 dark:border-gray-700'
                  }`}
                >
                  <div className="flex-1 min-w-0">
                    <p className="text-xs font-medium text-gray-900 dark:text-white truncate">
                      {favoriteVoiceName === voice.name && '‚≠ê '}{voice.name}
                    </p>
                    <p className="text-xs text-gray-500 dark:text-gray-400">
                      {voice.lang} ‚Ä¢ {voice.localService ? '–õ–æ–∫–∞–ª—å–Ω—ã–π' : '–û–±–ª–∞—á–Ω—ã–π'}
                    </p>
                  </div>
                  <div className="flex gap-1">
                    <Button 
                      onClick={() => testVoice(voice)} 
                      disabled={isSpeaking && selectedVoice !== voice.name}
                      size="sm"
                      variant="ghost"
                      title="–ü—Ä–æ—Å–ª—É—à–∞—Ç—å"
                    >
                      <Icon name={selectedVoice === voice.name ? "Volume2" : "Play"} size={14} />
                    </Button>
                    {favoriteVoiceName === voice.name ? (
                      <Button 
                        onClick={removeFavoriteVoice}
                        size="sm"
                        variant="ghost"
                        className="text-yellow-500 hover:text-yellow-600"
                        title="–£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
                      >
                        <Icon name="Star" size={14} fill="currentColor" />
                      </Button>
                    ) : (
                      <Button 
                        onClick={() => saveFavoriteVoice(voice.name)}
                        size="sm"
                        variant="ghost"
                        className="text-gray-400 hover:text-yellow-500"
                        title="–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
                      >
                        <Icon name="Star" size={14} />
                      </Button>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {otherVoices.length > 0 && (
          <div>
            <h4 className="text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2">
              üé≠ –î—Ä—É–≥–∏–µ –≥–æ–ª–æ—Å–∞ ({otherVoices.length})
            </h4>
            <div className="space-y-2">
              {otherVoices.map((voice) => (
                <div 
                  key={voice.name}
                  className={`flex items-center justify-between p-2 rounded border ${
                    selectedVoice === voice.name 
                      ? 'bg-cyan-100 dark:bg-cyan-900/30 border-cyan-500' 
                      : 'bg-gray-50 dark:bg-gray-800 border-gray-200 dark:border-gray-700'
                  }`}
                >
                  <div className="flex-1 min-w-0">
                    <p className="text-xs font-medium text-gray-900 dark:text-white truncate">
                      {favoriteVoiceName === voice.name && '‚≠ê '}{voice.name}
                    </p>
                    <p className="text-xs text-gray-500 dark:text-gray-400">
                      {voice.lang} ‚Ä¢ {voice.localService ? '–õ–æ–∫–∞–ª—å–Ω—ã–π' : '–û–±–ª–∞—á–Ω—ã–π'}
                    </p>
                  </div>
                  <div className="flex gap-1">
                    <Button 
                      onClick={() => testVoice(voice)} 
                      disabled={isSpeaking && selectedVoice !== voice.name}
                      size="sm"
                      variant="ghost"
                      title="–ü—Ä–æ—Å–ª—É—à–∞—Ç—å"
                    >
                      <Icon name={selectedVoice === voice.name ? "Volume2" : "Play"} size={14} />
                    </Button>
                    {favoriteVoiceName === voice.name ? (
                      <Button 
                        onClick={removeFavoriteVoice}
                        size="sm"
                        variant="ghost"
                        className="text-yellow-500 hover:text-yellow-600"
                        title="–£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
                      >
                        <Icon name="Star" size={14} fill="currentColor" />
                      </Button>
                    ) : (
                      <Button 
                        onClick={() => saveFavoriteVoice(voice.name)}
                        size="sm"
                        variant="ghost"
                        className="text-gray-400 hover:text-yellow-500"
                        title="–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
                      >
                        <Icon name="Star" size={14} />
                      </Button>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {relevantVoices.length === 0 && (
          <div className="p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg border border-yellow-200 dark:border-yellow-800 text-center">
            <Icon name="AlertTriangle" className="mx-auto mb-2 text-yellow-600" size={24} />
            <p className="text-sm text-yellow-800 dark:text-yellow-200">
              –ì–æ–ª–æ—Å–∞ –¥–ª—è —è–∑—ã–∫–∞ {voiceLanguage} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            </p>
            <p className="text-xs text-yellow-600 dark:text-yellow-400 mt-1">
              –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —è–∑—ã–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            </p>
          </div>
        )}

        <div className="pt-4 border-t border-gray-200 dark:border-gray-700">
          <details className="text-xs">
            <summary className="cursor-pointer font-semibold text-gray-700 dark:text-gray-300 mb-2">
              üìã –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –≥–æ–ª–æ—Å–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç?
            </summary>
            <div className="space-y-2 text-gray-600 dark:text-gray-400 mt-2 pl-4">
              <p>‚úì –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤–∞—à –±—Ä–∞—É–∑–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–∑–≤—É—á–∫—É (Chrome, Edge, Safari —Ä–∞–±–æ—Ç–∞—é—Ç –ª—É—á—à–µ –≤—Å–µ–≥–æ)</p>
              <p>‚úì –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–≤—É–∫ –Ω–µ –≤—ã–∫–ª—é—á–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ</p>
              <p>‚úì –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</p>
              <p>‚úì –ù–∞ macOS/iOS –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≥–æ–ª–æ—Å–∞ –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö ‚Üí –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø ‚Üí –†–µ—á—å</p>
              <p>‚úì –í Windows –∑–∞–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –í—Ä–µ–º—è –∏ —è–∑—ã–∫ ‚Üí –†–µ—á—å ‚Üí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞–º–∏</p>
            </div>
          </details>
        </div>
      </div>
    </Card>
  );
}